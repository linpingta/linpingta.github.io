<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: redis | linpingta's blog]]></title>
  <link href="http://yoursite.com/blog/categories/redis/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2020-06-24T10:13:34+08:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[linpingta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[redis-pub-sub-python]]></title>
    <link href="http://yoursite.com/blog/2016/04/04/redis-pub-sub-python/"/>
    <updated>2016-04-04T16:37:41+08:00</updated>
    <id>http://yoursite.com/blog/2016/04/04/redis-pub-sub-python</id>
    <content type="html"><![CDATA[<p>Redis Pub/Sub</p>

<p>一.定义
<a href="http://redis.io/topics/pubsub">pubsub</a>指的是发布者将消息发布到指定通道，并不清楚（或者说不关心）订阅者，同时订阅者也指定接收通道接收消息，并不关心具体的发布者。通过这样的方法，实现发布者和订阅者之间的解耦。</p>

<p>二.Redis原语</p>

<p>1.订阅channe1到channel3的三个频道：</p>

<pre><code>subscribe channel1 channel2 channel3
</code></pre>

<p>2.向channel1发布消息"hello_world"：</p>

<pre><code>publish channel1 "hello_world"
</code></pre>

<p>3.channel1接收消息格式：</p>

<pre><code>message channel1 REAL_MESSAGE
</code></pre>

<p>其中第一项是消息类别，第二项是频道名称，第三项是实际接收的消息</p>

<p>4.unsubscribe结束对所有频道的订阅，在客户端调用</p>

<p>5.pattern-matching pub/sub
根据正则做消息订阅，接收所有以news开头频道的消息：</p>

<p>psubscribe news<em>
如果这里用的是subscribe，那么只能接收到名为"news</em>&ldquo;频道的消息，而不是以news开头所有频道的消息。</p>

<p>三.python版本实现</p>

<p>1.pubilsh.py
实现发布的功能是比较简单的（当然也是在原型条件下，没有考虑接收者的消息反馈和重发），代码基本只有三行：</p>

<pre><code>import redis

r = redis.Redis(host='localhost')
r.publish('ch1', 'hello world')
</code></pre>

<p>这里publish的返回值是当前这个频道subscribe的数量</p>

<p>2.阻塞subscribe.py
实现阻塞版本的消息接收需要使用listen函数：</p>

<pre><code>import redis

r = redis.Redis(host='localhost')
pubsub = r.pubsub()
pubsub.subscribe('ch1')

for item in pubsub.listen():
    print item
</code></pre>

<p>如果需要实现轮询的效果，可以在for外面再套一层while循环；listen的返回值格式如下：</p>

<pre><code>{'pattern': None, 'type': 'message', 'channel': 'ch1', 'data': 'hello,wolrd'}
</code></pre>

<p>其中有效部分为item[&ldquo;data&rdquo;]。</p>

<p>3.非阻塞subscribe.py
在subscribe的接口层面，这是不成立的，但是可以在语言层面通过多线程实现：独立的线程负责接收接口消息，主线程可以做自己的事情。</p>

<pre><code>import redis
import threading
import time

def subscriber():
    r = redis.Redis(host='localhost')
    sub = r.pubsub()
    sub.subscribe('a1')
    while True:
        for item in sub.listen():
            print item


if __name__ == '__main__':

    t = threading.Thread(target=subscriber)
    t.setDaemon(True)
    t.start()
    while 1:
        print 'waiting'
        time.sleep(10)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis.conf]]></title>
    <link href="http://yoursite.com/blog/2014/06/28/redis-conf/"/>
    <updated>2014-06-28T19:41:16+08:00</updated>
    <id>http://yoursite.com/blog/2014/06/28/redis-conf</id>
    <content type="html"><![CDATA[<p>redis.conf 关于redis的服务配置，类似Apache的http.conf</p>

<pre><code> 其中例如
 1. 关于snapshotting的设置
      save time num
 for example, save 900 1 表示如果900s内有一个key发生改变，那么就写到硬盘
 2. work directory的设置     
 dir ./ 默认是当前目录
 3. replication
 master-slave replication 其中slave可以有自己单独的备份设置 （比如间隔多久写到硬盘）
 slaveof &lt;masterip&gt; &lt;masterport&gt;
 4. limits
 maxclients 
 最大客户连接数，默认是0，即无上限，那么连接数取决于redis能够获得的file descriptor的上限
 maxmemory
 可以使用的最大内存
 max memory policy
 当max memory达到时，进行替换的原则 （可以理解为cache替换的原则）
 5. append only mode (5中的操作是对数据安全要求较高的操作，默认no，即采用1的策略)
 默认mode是异步写入磁盘，那么可能存在crash导致最近数据丢失的情况
 采用append only mode，以速度损失为代价，保证数据不丢失，临时文件会存储到appendonly.aof中

 append策略
      1. always 速度最慢但最安全，每次写操作都写入append.aof
      2. everysec 在速度和安全性间平衡
      3. no 由操作系统决定何时写入（buffer满），速度最快
 6. slow log 
 慢日志 (对应MySQL中的slow_query_log)
      可以做的设置包括
           被记录命令的时间间隔标准 (因为慢日志只会记录花费超过一定时间的查询)
           最大的日志size
 7. virutal memory
 在2.4以上的版本，VM已经被废止
 virtual memory的存在主要是满足数据使用的2/8定律，即20%的数据被访问的次数占到80%，但是另外80%的数据仍然需要存储，对于内存不足的情况，那么使用硬盘作为VM，另外，作者推荐用SSD作为硬盘（因为其随机访问时间短）
</code></pre>
]]></content>
  </entry>
  
</feed>
