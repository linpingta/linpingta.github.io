<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: facebook | linpingta's blog]]></title>
  <link href="http://yoursite.com/blog/categories/facebook/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2020-06-24T10:13:34+08:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[linpingta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Facebook-RTB广告投放及策略工程师工作]]></title>
    <link href="http://yoursite.com/blog/2016/10/29/facebook-strategy-thinking/"/>
    <updated>2016-10-29T11:50:23+08:00</updated>
    <id>http://yoursite.com/blog/2016/10/29/facebook-strategy-thinking</id>
    <content type="html"><![CDATA[<p>我希望这是一篇有意思的博客，虽然内容里没有代码，没有技术名词。我想说说Facebook广告投放是怎么回事，然后说说作为策略工程师的一些感受。
首先说明，策略的内容不能谈，工作里确实见过不少，每个广告主都有不同的想法，我们也有自己的想法，但一是直接把这些放在这里不合适，毕竟不都是我的想法，二是看起来没有必胜的策略，所以如果想看这个就请忽略本文吧。</p>

<h3>Facebook广告</h3>

<p>因为我是做这个的，先谈谈对自动管理系统的认识：</p>

<pre><code>我觉得一直存在一个误区，好像用了自动投放系统，效果就能特别好，量级又大成本又低。其实不是的，广告的效果本身是取决于产品（魔兽就是比一个不知名的MMORPG好投），其次取决于创意（美女图片ctr就是比一般产品高），自动投放系统只是控制广告的预算出价和开关，它没有能力把一个坏创意或者坏产品变成好的，它能做的，其实也只是在广告量价关系上的改善：把好创意尽量多投（高出价高预算），把坏创意尽量少投（及早关停）。
</code></pre>

<p>下面说正经的：</p>

<h4>原理篇</h4>

<p>Facebook有四种竞价方式：CPM, CPC, oCPM和CPA。前两种分别是对M（展现）和C（点击）出价，后两种都是为A（激活）出价，但结算方式不同。
从覆盖人群能力讲，CPM>CPC>oCPM>CPA，因为CPC相比CPM要做ctr的预估，这就会过滤到一批不合理的人群，oCPM与CPC同理。
通常而言，App广告主都会选择oCPM或CPA，但CPA要求广告账户有足够的安装积累为前提，因此并非一开始就可以用，所以oCPM相比而言用的最多。但题外一句，CPA对成本控制会更好。
但无论是哪种竞价方式，Facebook在内部都是会进行广告排序，然后决定对这个流量展现哪个广告，而广告排序，就必然要统一到CPM级别，CPC广告会根据预估的ctr和当前的C单价去计算一个CPM，oCPM和CPA则是要预估ctr和cvr，然后反算一个CPM。
Facebook的广告排序不仅考虑CPM（即谁的出价高），同时也要考虑广告的品质，即质量得分（relevance score），当用户Like转发品论广告时，relevance score会提高，反之当他们关闭广告时，relevance score会降低。
最终，每个广告会获得一个分数，这个分数取决于CPM和relevance score</p>

<pre><code>score = CPM + a * relevance_score
</code></pre>

<p>当然，尽管Facebook对外暴露出的relevance score只有1-10，但它内部肯定有更详细的指标，只是我们可以把relevance score作为一个定性指标了。
从这个角度出发，提高广告曝光有两个途径：提高广告质量， 提高广告出价（无论是A,C，还是M）。
Facebook还有一个因素是daily budget，因为pacing算法的存在，daily budget其实也是对广告花费量级有影响的。</p>

<h4>指标篇</h4>

<p>当广告投起来后，我们就会看到展现，点击，安装，常用的几个指标：ctr, cvr, cpm, cpa, spend, roi</p>

<pre><code>ctr：click/impression，点击率太低的广告，要想想素材第一眼的吸引力
cvr：install/click，转化率太低的广告，可能主要是素材和产品不匹配，用户点进去了发现不是那么回事
cpm：1000*spend/impression，其实表示你覆盖的人群类别，
cpa：成本，广告主关心问题之一
spend：花费，广告主关心问题值二
roi：(income-spend)/spend，其实就是由cpa和spend决定的
</code></pre>

<p>这些指标，重要的不仅是绝对值，还有相对值：</p>

<pre><code>和昨天同时段的比较
</code></pre>

<p>通常而言，CPA在投放地域的凌晨都会很高，而量级都会很少，以东南亚为例，我们通常都是在白天看数据，那么直接比较今天和昨天的CPA并不信服，而是应该看看今天和昨天同时段的情况。同理，周末的成本也会和平时不一样，这点也需要在比较时参考。</p>

<pre><code>和理论值的比较
</code></pre>

<p>CPA在不同投放地域的表现不同，欧美的成本就是远高于东南亚，cvr对新游戏老游戏不同，在投放地域存在基准值，可以用于判断ctr和cvr是否合理，以及素材本身是否需要改进。</p>

<pre><code>看趋势
</code></pre>

<p>有些时候成本或量级不符合要求，我们做了某些调整，但如果只看总体的效果，一段时间后仍然不符合预期，这时候需要仔细去分析小时数据的变化，即调整后怎么样了，才能合理评估调整的效果。这里面的一个黑科技是，通常调整后的一个小时，成本都有可能飙高，所以一是不要调整太频繁，二是看3-4个小时的效果较好。</p>

<p>再说说绝对值的事情：</p>

<pre><code>要看花费后再看CPA/ctr/cvr
</code></pre>

<p>花费只是几十美金的情况下，看CPA/ctr/cvr的绝对值高低参考意义不大。一定量级后再分析成本，包括离线模型也会滤除花费太少的ad。</p>

<pre><code>CPM与ctr*cvr是正相关的
</code></pre>

<p>投出的CPM某种程度上代表了你买到的人群，抛去特定产品的因素，人群本身对游戏的转化率也是不同的，比如有些人群会更喜欢玩游戏，当然，对他们的竞争也更激烈，表现为CPM也更高。
所以这里的一个黑科技是，覆盖不同的人群，因为本质上说，CPM增加和ctr*cvr增加速率高低，决定了CPA的大小，所以如果能够在指定人群上取得增量收益，即虽然花的钱多，但ctr*cvr增加更多，你还是能够降低成本的。</p>

<h4>设置篇</h4>

<p>素材</p>

<pre><code>做好素材，这不用多说了，原则上你素材够好，下面我写的都可以不用看了

多尝试不同的素材类型，比如轮播，视频，尤其是新广告形式刚刚上线的时候
文案意义不大，从目前的情况看，把语言搞对就行了
</code></pre>

<p>定向</p>

<pre><code>不要在一个定向上设置多于4个创意，否则也会竞争
不要在一个地域定向里包含太多国家，除非有必要这样做（比如每个国家人群太小）
对太大的游戏设置wifi-only
设置排除app和page like
一版friend of connection没什么用
游戏性别基本就是男性，应用可以混着
受众比较有用
兴趣其实用一般都名词就好，太细了除非你有研究
。。。
保证你的受众人群不要太小，越小竞争肯定越激烈
</code></pre>

<p>设置</p>

<pre><code>bid方法很多，我很推荐用我们的系统，简单来说，就按广告主的设置也可以，或者了解投放地域特点大致设置
daily budget 如果是应用，不要太高，如果是游戏，就看要不要量级
pause/start 创意级别开关可以的，但最好不要只看凌晨的数据
autobid: 有些时候结合daily budget可以，有些时候测试图不错，有些时候也会飞
</code></pre>

<h3>策略工程师随想</h3>

<p>其实最开始到RTB项目组，我们日常最花费精力的事情就是投放广告case的维护，现在想想，这应该是策略工程师的日常。</p>

<pre><code>运营会反馈：“我的广告投不出去了”，“我的广告成本不行”，“我的广告花费速度比昨天慢了”，“我的广告被拒了”。。。
</code></pre>

<p>策略工程师的任务
第一步来说，是通过后台投放的逻辑和数据分析，去发现问题究竟出在哪里。</p>

<pre><code>比如广告花费少，是因为内部排序的win\_rate低，那么是不是这个case单价过低，比如广告内部win\_rate不低，但在Ad Exchange上的win\_rate低，那么对比几天，看看是不是有土豪对手在竞价。。。再比如成本相差大，看看是不是ctr预估不准，是离线的问题，能不能加在线的因素控制，是在线的问题，看看会不会是时间窗口问题。。。
</code></pre>

<p>第二步，是根据发现的情况，给运营建议。因为在RTB投放里，运营看到的是一个黑盒系统，策略工程师实现系统，他可以了解问题出在哪里。</p>

<pre><code>比如是创意不行，还是出价过低，定向人群过少，或者其它的一些设置不合理（初始探测预算较小），也有可能问题是系统本身的问题，简单说是bug，复杂说可能是系统现在的局限。比如新创意没有保护，是否考虑保护一段时间，至少让它有一定的展现，万一是ctr, cvr很高的case呢
</code></pre>

<p>第三步，是总结常见的问题，进行系统改进。策略工程师相比运营更加理性，同时可以了解更多运营的通用需求，这种情况下，去总结问题，将它变成策略。
策略要注意的是实验，条件允许的情况下，总要通过A/B测试去确定策略是否合理。
策略同样要注意case by case的特点，广告主的诉求彼此不同，通常在投放的不同阶段也不会相同，所以策略总是有使用条件的，甚至有些时候，为特定广告主特定调整参数，也是完全可能的。</p>

<p>第四步，和前三步不同，那就是问题未必来自运营的直接反馈，而是自己的主动发现。
<strong>广告的核心问题，就是量级和成本的关系。我们总是希望用少的成本，同时获取高的量级。</strong></p>

<pre><code>当然它们本身是矛盾的，但总有一个平衡点，比如广告的动态出价，依赖当前广告的实际成本，去反馈不一样的出价，当前成本高了，实际出价低些，反之高些
</code></pre>

<p>这些大概都是两年以前在RTB项目组做项目的体会，现在居然还有不少印象。我在RTB项目组只呆了半年的时间，后来新成立Facebook项目组，我是从零开始的参与，事情类别多了很多，比如要先开始搭广告管理和统计的服务，研究Facebook API，后来又做数据支持和应用，但很大一部分工作，仍然是在策略上。
Facebook的模式和RTB不太一样，RTB是对每个流量竞价，你有个内部广告库，要过滤后排序，然后给出一个流量的绝对出价；Facebook你看不到每个流量，也不需要你对广告自己做排序，但要你为每个定向决定出价。从模式上说，Facebook很像做SEO，从技术上说，Facebook模式里，我们扮演的是RTB运营的角色，内部广告系统对我们是黑盒，我们要决定该怎么参与其中。
关于Facebook投放中的一些指标，在上面已经提了，总体而言，因为Facebook的黑盒特点，策略工程师的事情更不容易做，但我也在想办法更好的去理解它。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook电商广告投放初步]]></title>
    <link href="http://yoursite.com/blog/2016/10/09/facebook-sale-ads/"/>
    <updated>2016-10-09T10:23:53+08:00</updated>
    <id>http://yoursite.com/blog/2016/10/09/facebook-sale-ads</id>
    <content type="html"><![CDATA[<p>此内容基于一次电商广告投放的介绍。</p>

<p>因为是基于一次介绍的信息，因此内容可能看起来层次感会比较差，但从实践的角度讲，无论是技术还是运营，都可以得到一些帮助。</p>

<p>我们假设广告主在网站埋点的工作已完成，假设对install类广告有一定了解。</p>

<p>Facebook 电商广告分为两类：非DPA广告和DPA广告</p>

<p>创建篇
1.非DPA广告</p>

<pre><code>Campaign：
    选择推广目标为Increase conversions on your website
Adset：
    大部分设置和install一致，区别在于需要首先设置Conversions，Conversions依赖用户在网站的埋点，预定义的行为包括Add To Cart，Purchase等，没有埋点的事件是不可选的，电商常用的事件就是Add To Cart和Purchase。
    投放技巧上，Adset的目标在投放早期最好设置为Add To Cart而不要直接设置为Purchase，因为早期购买数据积累较少，直接设置目标为Purchase很可能不会得到展现。在投放了一两个月后，再设置目标为Purchase。
Ad：
    同样设置方法和Install一致，但从投放技巧上，通常会选择轮播图或者轮播视频，让每个图是不同的产品，后续在统计查看时，找到转化好的产品（爆款），然后集中推广
</code></pre>

<p>2.DPA广告：</p>

<pre><code>Campaign：
    选择推广目标为Promote a product catalog，同时要选择一个Product Catalog

AdSet：
    设置方法不同于Install和非DPA广告，一开始要从Product Catalog里选择一个Product Set，即推广产品的列表。
    在Audience方面，DPA提供了四种默认的Audience方式：
        Viewed or Added to Cart But Not Purchased
        Added to Cart But Not Purchased
        Upsell Products
        Cross-Sell Products
    同时也支持基于View和Add To Cart这些行为去进一步定义custom audience，从这些设置中可以看出，DPA主要是对老客户的reseller，因为它的Audience至少是View product过，而非DPA广告则是对新客户推广。
    在Placement方面，它默认的方式是automatic placement
Ad：
    由于是DPA广告，它在文案等内容上支持插入参数，这些参数来自Product Set的预定义
</code></pre>

<p>统计篇</p>

<pre><code>无论是DPA还是非DPA广告，它们相比Install广告会多Add To Cart和Purchase两个指标，分别包含Add To Cart Number（加入购物车的用户数）和Add To Cart Spend（用户在购物车里加了多少钱），Purchase Number和Purchase Spend。
电商广告主通常优化的唯一目标是ROI，即广告花费spend amounnt相比Purchase Spend的数值。但由于Purchase行为是滞后于花费行为的，因此在投放初期很可能看到只有花费，而没有后续收入的情况，这时依赖产品的ctr和Add to cart spend / spend作为判断依据，即产品ctr较高，以及加入购物车的钱数较多时，后续收回成本的可能性更高。
另外电商相比Install特殊的一点是，因为它经常会在一个广告里放多个产品，因此在Ad级别breakdown数据观察很重要，对于非DPA广告可以观察每个广告图的投放情况，对于DPA广告，可以按Product ID观察。另外，由于Spend是基于Ad而不能细致到每个产品，因此主要观察Purchase和ctr作为产品判断的依据。
</code></pre>

<p>其它技巧及注意</p>

<pre><code>1. 电商广告投放初期可能会有成本回收不及时的问题，因此要有心理预期，回收时间范围会比install更长
2. 考虑先用DPA一般投放，找到爆款后再单独建campaign投放指定产品
3. DPA广告的ROI通常会远高于非DPA广告，因为它投放的是老顾客，相对而言非DPA广告投放的是新顾客
4. 初期设置Add To Cart为目标，后期设置Purchase为目标
5. 不要相信Fb的suggest bid
6. 投放时可以采用小预算，尤其尝试新产品的时候
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DPA Ad]]></title>
    <link href="http://yoursite.com/blog/2016/04/21/dpa-ad/"/>
    <updated>2016-04-21T18:56:56+08:00</updated>
    <id>http://yoursite.com/blog/2016/04/21/dpa-ad</id>
    <content type="html"><![CDATA[<p>本篇blog是DPA广告的一个简单介绍，主要阐述一些容易疑惑的问题，具体API操作和完整的操作还需要参考<a href="https://www.facebook.com/business/help/397103717129942?sr=3&amp;query=dynamic%20product%20ad&amp;sid=1zBRPgENv8I6Vf6LK">FB文档</a>。</p>

<p>为什么是DPA (dynamic product ad)？</p>

<pre><code>dynamic指的是产品信息动态展现，不同的用户可能看到不同产品的广告。
product即产品，这类广告用于电商产品的投放。
所以这也是DPA广告的基础：因为dynamic，所以要在网站埋点（否则怎么知道哪个用户喜欢哪个产品），因为product，所以要先创建product catalog才能投放广告。
</code></pre>

<p>Product Catalog/Feed/Set区别</p>

<pre><code>catalog是一个产品目录，feed是里面的产品集合，每个feed是一个产品的全部信息，他们是一对多关系，类似campaign和adset。
set是一个广告投放的概念，一个catalog中可以有多个set，每个set中可以有多个产品，真实创建广告时，需要指定的是set信息。
feed需要是满足一定的格式csv或者其它文件，包含的信息包括SKU产品的状态（是否在售），描述，图片链接，网站链接，标题和价格等信息，这些信息最终会用于创意模板的填充
</code></pre>

<p>Pixel</p>

<pre><code>app有一套类似的event定义，没有细看，这里只说网站埋点的事情。
首先pixel是account级别的，在admanager tools里面可以创建pixel。创建后的pixel要和创建的product catalog关联。
pixel本身是一段js代码，要把它加到要埋点的网页中，同时要对应到具体的逻辑上面。所谓对应，指的是，如果要汇报"add to cart"事件，那么相应的js需要在网站上用户实际点击了"add to cart"后触发，因此这里的工作需要工程师支持，毕竟你得知道如何触发相关逻辑的代码才行。
pixel默认的行为只有page view, 但FB要求你至少添加三类基本事件的逻辑：
(1) viewcontent：用户查看页面
(2) addtocart：添加到购物车
(3) purchase：购买
这些行为发生时，会通过js汇报给FB，FB会依赖这些数据创建product audience
</code></pre>

<p>Product audience</p>

<pre><code>来自事件汇报，把基础事件进行组合，比如“添加了购物车但没有购买”的用户作为投放对象，那么有了"add to cart"和"purchase"事件后，可以创建相应的audience。
需要注意的是，audience是DPA广告必须的（否则也没有必要费劲埋点之类的）。
这样也可以看出DPA是比较适合做重定向的。
</code></pre>

<p>创建广告</p>

<pre><code>创建campaign：和install广告类似，当然objective不同
创建adset：此时要指定product audience为投放对象，要指定product set为广告产品的来源集合，DPA会将product set中合适的产品展示给合适的用户（依赖machine learning）
创建ad/creative：不同于install广告需要指定广告的image_url，creative要指定的是creative template和product set，前者是创意模板，后者是模板中填充内容的来源。也就是说，有了product feed的title, image_url, website_url等信息，可以自动产生创意，而这个创意会在不同的投放人群上选择不同的product feed
</code></pre>

<p>DPA vs 其它广告</p>

<pre><code>我的理解是，DPA是用来投电商的，但不是投电商一定要用DPA。从上述过程可以看到，DPA的创建过程是比较麻烦的，它的价值在于：
(1) 效果可追踪，因为它的广告不是宣传你的网站，而是具体到了一个细致的产品售卖
(2) 人群优选：重定向，或者其它交叉定向（买了啤酒的人更容易买。。）
但它是不能覆盖那些没有访问你网站的用户的，因此如果你的目标是宣传你的电商网站，而不是追踪产品售卖结果的话，选择其它广告，而不是DPA
</code></pre>

<p>7.使用步骤</p>

<pre><code>(1) 创建产品集合product catalog
(2) 创建FB像素并埋点到网站
(3) 依赖(1)创建product set
(4) 依赖(2)创建product audience
(4) 定义创意模板，添加product set
(5) adset依赖product set和product audience, ad依赖product set和creative template，这些都有了，可以创建DPA广告
</code></pre>

<p>参考文档
<a href="https://developers.facebook.com/docs/facebook-pixel/pixel-with-ads/dynamic-product-ads#how-to-obtain-a-Facebook-Pixel-ID">https://developers.facebook.com/docs/facebook-pixel/pixel-with-ads/dynamic-product-ads#how-to-obtain-a-Facebook-Pixel-ID</a>
<a href="https://developers.facebook.com/docs/marketing-api/dynamic-product-ads/v2.5">https://developers.facebook.com/docs/marketing-api/dynamic-product-ads/v2.5</a>
<a href="https://developers.facebook.com/docs/marketing-api/dynamic-product-ads/product-audiences/v2.5">https://developers.facebook.com/docs/marketing-api/dynamic-product-ads/product-audiences/v2.5</a>
<a href="https://developers.facebook.com/docs/marketing-api/dynamic-product-ads/ads-management/v2.5">https://developers.facebook.com/docs/marketing-api/dynamic-product-ads/ads-management/v2.5</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Facebook API可以考虑了解的几件事]]></title>
    <link href="http://yoursite.com/blog/2016/01/15/facebook-api-related/"/>
    <updated>2016-01-15T15:11:12+08:00</updated>
    <id>http://yoursite.com/blog/2016/01/15/facebook-api-related</id>
    <content type="html"><![CDATA[<ul>
<li><p>Facebook API分为Graph API，Marketing API和Atlas API三种：</p>

<ul>
<li>Graph API：是否还记得几年前Facebook推出的社交图谱，实际上它就是Graph API对应的逻辑概念。Graph API是另外两种API的基础，它实际是最主要也是最全面的Facebook对象获取方式。</li>
<li>Marketing API：与广告营销相关的API，比如作为FMP（Facebook Marketing Partner，像Domob），或者作为广告主调用</li>
<li>Altas API：实话说，我在今天之前都不知道这个API系列，看了下它的介绍，好像也是与应用和广告管理有关，但是里面的文档大多数又不可访问了，暂时打算忽略</li>
</ul>
</li>
<li><p>Facebook API开发必备：</p>

<ul>
<li>如果你是Python/PHP开发者（最近应该又造福了Java），可以在Github上搜索官方提供的SDK，比如<a href="https://github.com/facebook/facebook-python-ads-sdk">Python的</a>。</li>
<li>如果你用其它语言，那么可能你需要自己手写SDK，就需要涉及到构造Http请求，这时候推荐现在<a href="https://developers.facebook.com/tools/explorer/145634995501895/">Facebook Graph Explorer</a>验证你的请求是否正常（容易的说官方的SDK也是拼接Http请求，基于requests库，但自己做起来还是很麻烦的，感谢官方SDK）</li>
</ul>
</li>
<li><p>Facebook API采用RESTful API格式设计，具体介绍可见我之前的<a href="http://linpingta.cn/blog/2015/11/08/facebook-api-introduction/">博客</a></p></li>
<li><p>Graph API：每个Graph API包含三个部分：nodes, edges, fields，请求哪个对象（nodes）的哪个关联（edges）的哪个属性（fields），可见edges并不是必须的，完全可以通过nodes/fields=xxx的形式请求nodes本身的属性。举个例子， ad_id/fields=name用于请求ad名称，ad_id/creatives/fields=name用于请求ad下面创意的名称，在<a href="https://developers.facebook.com/docs/graph-api">这里</a></p></li>
<li><p>Marketing API：实际也是Graph API的一个子集，在<a href="https://developers.facebook.com/docs/marketing-apis">这里</a></p></li>
<li><p>Facebook API实例：<a href="https://www.facebookmarketingdevelopers.com/samples/">这里</a>，看起来非常完全，不过是基于python的，我很遗憾我刚开始开发的时候没有发现这个东西（也可能是当时还没有），不过以后的开发，参考这里应该非常有帮助</p></li>
<li><p>Facebook API文档：实际更广泛的说，应该叫Facebook developer文档，它本身服务的对象包括Facebook应用开发者，相关应用（比如Instagram, Oculus,）开发者，广告营销开发者，比如包含很多为移动开发者准备的IOS或则Android SDK，具体见<a href="https://developers.facebook.com/docs">这里</a>。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook API (RESTful API)简介]]></title>
    <link href="http://yoursite.com/blog/2015/11/08/facebook-api-introduction/"/>
    <updated>2015-11-08T12:46:21+08:00</updated>
    <id>http://yoursite.com/blog/2015/11/08/facebook-api-introduction</id>
    <content type="html"><![CDATA[<p>这里称之为简介实际也是勉强的，因为我所涉及的API主要只包含广告相关操作的API (称为Marketing API)和很小部分的用户行为API(称为Graph API，Marketing API是包含于Graph API中的一个小部分，Facebook有一个在西雅图的团队主要负责API相关的设计和各类语言支持。。因为见过他们的一些人。。扯得有点远)，但我更想借这个机会去了解API设计的规范，至少从我的角度看，Facebook API在使用上还是让人满意的，最后也会涉及一些Facebook 具体API调用方面的说明。</p>

<h4>RESTful</h4>

<p>1.RESTful与RESTful API：Representational State Transfer，表现层状态转化</p>

<p>这实际是一个非常熟悉的概念，但如果突然被问到，却很难讲清楚。按我现在的理解，REST本身是一种架构规范，它指的是网络通信方式以 “资源（服务器对象）的表现形式上发生状态转换（增删改查操作）“的方式来实现，RESTful API指的是在设计规范上符合RSET架构的API。
RESTful API的一个重要特点是API本身没有动词，因为所有资源都是用名词表示的，通过GET/POST/DELETE/HEAD等http请求来模拟读写删等操作。因此RESTful API看起来非常清晰：</p>

<pre><code>GET graph.facebook.com/v2.4/me?field=id, name
</code></pre>

<p>获取me资源中id和name字段的值。</p>

<p>看起来是一件很简单的事情，不是么？但RESTful的重要价值就在于它提供了一种简单清晰的规范，让所有人都可以参照去做。或许你自己的网站也有一套url定义，但想想，如果你的网站不只是十几个，而是上百个页面的时候（从Facebook API对外提供的对象接口看，上百个应该只是保守说法），再或者说，当你的网站需要和开发者有交互时，这或许是最重要的原因，开发者通常来自世界，必须要有一套基础标准来规范通信方式，否则网站API升级一个版本导致以前的url全得重写，那开发者基本也会离你而去了。</p>

<p>2.RESTful API格式</p>

<p>格式即元素，每个RESTful API应该包含哪些元素：</p>

<pre><code>GET 
https://graph.facebook.com/v2.4/ADSET_ID?fields=id,name&amp;access_token=YOUR_ACCESS_TOKEN

返回：

{
   "id": "ADSET_ID",
   "name": "ADSET_NAME"
}
</code></pre>

<ul>
<li>协议：https</li>
<li>域名：graph.facebook.com，API通常有一个独立的域名</li>
<li>版本：v2.4，API在调用中通常要指定版本</li>
<li>对象(endpoint)：ADSET_ID，你要访问的资源对象</li>
<li>属性：fields，算是一个特殊的属性，它用于访问资源对象本身的属性</li>
<li>access_token也算是一个特殊属性，无论是Facebook还是Weixin的API，都需要权限，而权限信息就保持在access_token中</li>
<li>操作类型：GET/POST是最主要的</li>
<li>返回值和状态码：status_code</li>
</ul>


<p>关于RESTful的相关概念，应该还可以参考<a href="http://www.zhihu.com/topic/19579308/top-answers">知乎</a>，但坦白说大部分内容我也没有看。</p>

<h4>Facebook API</h4>

<p>本文并无意（实际也没有能力）列举所有Facebook对象以及调用方法，但通过上文的说明，Facebook API是有固定的理解方式的：</p>

<pre><code>选择一个对象(endpoint)，选择它的属性(fields)，指定操作类型(GET/POST)，保证权限（access_token）
然后，。。。API调用就完成了
</code></pre>

<p>具体的API调用文档可以打开<a href="https://developers.facebook.com/docs/%EF%BC%8C%E7%84%B6%E5%90%8E%E6%90%9C%E7%B4%A2%E8%A6%81%E6%89%BE%E7%9A%84%E5%AF%B9%E8%B1%A1%E3%80%82">https://developers.facebook.com/docs/%EF%BC%8C%E7%84%B6%E5%90%8E%E6%90%9C%E7%B4%A2%E8%A6%81%E6%89%BE%E7%9A%84%E5%AF%B9%E8%B1%A1%E3%80%82</a></p>

<p>然而还有几点算是比较通用的（文档里常常要去关注的），我想有必要在这里列举下：</p>

<ul>
<li>changelog：在<a href="https://developers.facebook.com/docs/apps/changelog">这里</a>，每个版本的API都有使用期限，如果超过会造成API调用失败，服务受到损失，通常情况下，开发不会总是去追最新的版本，因此必须注意版本的时效性，以及不同版本间对象的修改情况。（这里的一个例子是，Python Ads SDK中的对象命名在最近做了较大的修改，比如class AdGroup修改为class Ad）</li>
<li>Explorer：在<a href="https://developers.facebook.com/tools/explorer/">这里</a>，这是Facebook提供的一个web端调用页面（想想微信好像也有），使得用户不需要自己去拼http请求查看调用效果，在遇到新endpoint不熟悉其相关属性的时候非常方便，它本身也支持field字段的搜索，非常赞的功能。</li>
<li>token：在<a href="https://developers.facebook.com/docs/facebook-login/access-tokens/">这里</a>，token几乎是API调用的一个必须字段，理解token实际就是API是否有访问对象(endpoint)的权限，Facebook中token分为三类：App token/Page token/User token，我在工作中常用的是最后一项，相当于代表用户去操作广告</li>
<li>batch_request：在<a href="https://developers.facebook.com/docs/marketing-api/batch-requests#adgroup">这里</a>，批量操作在广告API中非常常见，比如用户在一次campaign创建时创建几百个adset，或者获取几百个adset的统计数据。因为Facebook本身对API的调用频率也有限制，超出后会遇到user call frequency limit的错误，因此很多广告操作必须要用批量接口实现。</li>
</ul>


<p>暂时关于Facebook API能想到的东西就到这里，我这一年的使用感觉是，有问题看文档，Facebook作为世界最大的互联网公司，提供的文档本身是非常完善的，如果仍然有问题，可以关注Facebook上的一些技术小组，里面也有Facebook的工程师会回答问题。</p>
]]></content>
  </entry>
  
</feed>
