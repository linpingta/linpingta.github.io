<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: data | linpingta's blog]]></title>
  <link href="http://yoursite.com/blog/categories/data/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2020-06-24T10:13:34+08:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[linpingta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Facebook-RTB广告投放及策略工程师工作]]></title>
    <link href="http://yoursite.com/blog/2016/10/29/facebook-strategy-thinking/"/>
    <updated>2016-10-29T11:50:23+08:00</updated>
    <id>http://yoursite.com/blog/2016/10/29/facebook-strategy-thinking</id>
    <content type="html"><![CDATA[<p>我希望这是一篇有意思的博客，虽然内容里没有代码，没有技术名词。我想说说Facebook广告投放是怎么回事，然后说说作为策略工程师的一些感受。
首先说明，策略的内容不能谈，工作里确实见过不少，每个广告主都有不同的想法，我们也有自己的想法，但一是直接把这些放在这里不合适，毕竟不都是我的想法，二是看起来没有必胜的策略，所以如果想看这个就请忽略本文吧。</p>

<h3>Facebook广告</h3>

<p>因为我是做这个的，先谈谈对自动管理系统的认识：</p>

<pre><code>我觉得一直存在一个误区，好像用了自动投放系统，效果就能特别好，量级又大成本又低。其实不是的，广告的效果本身是取决于产品（魔兽就是比一个不知名的MMORPG好投），其次取决于创意（美女图片ctr就是比一般产品高），自动投放系统只是控制广告的预算出价和开关，它没有能力把一个坏创意或者坏产品变成好的，它能做的，其实也只是在广告量价关系上的改善：把好创意尽量多投（高出价高预算），把坏创意尽量少投（及早关停）。
</code></pre>

<p>下面说正经的：</p>

<h4>原理篇</h4>

<p>Facebook有四种竞价方式：CPM, CPC, oCPM和CPA。前两种分别是对M（展现）和C（点击）出价，后两种都是为A（激活）出价，但结算方式不同。
从覆盖人群能力讲，CPM>CPC>oCPM>CPA，因为CPC相比CPM要做ctr的预估，这就会过滤到一批不合理的人群，oCPM与CPC同理。
通常而言，App广告主都会选择oCPM或CPA，但CPA要求广告账户有足够的安装积累为前提，因此并非一开始就可以用，所以oCPM相比而言用的最多。但题外一句，CPA对成本控制会更好。
但无论是哪种竞价方式，Facebook在内部都是会进行广告排序，然后决定对这个流量展现哪个广告，而广告排序，就必然要统一到CPM级别，CPC广告会根据预估的ctr和当前的C单价去计算一个CPM，oCPM和CPA则是要预估ctr和cvr，然后反算一个CPM。
Facebook的广告排序不仅考虑CPM（即谁的出价高），同时也要考虑广告的品质，即质量得分（relevance score），当用户Like转发品论广告时，relevance score会提高，反之当他们关闭广告时，relevance score会降低。
最终，每个广告会获得一个分数，这个分数取决于CPM和relevance score</p>

<pre><code>score = CPM + a * relevance_score
</code></pre>

<p>当然，尽管Facebook对外暴露出的relevance score只有1-10，但它内部肯定有更详细的指标，只是我们可以把relevance score作为一个定性指标了。
从这个角度出发，提高广告曝光有两个途径：提高广告质量， 提高广告出价（无论是A,C，还是M）。
Facebook还有一个因素是daily budget，因为pacing算法的存在，daily budget其实也是对广告花费量级有影响的。</p>

<h4>指标篇</h4>

<p>当广告投起来后，我们就会看到展现，点击，安装，常用的几个指标：ctr, cvr, cpm, cpa, spend, roi</p>

<pre><code>ctr：click/impression，点击率太低的广告，要想想素材第一眼的吸引力
cvr：install/click，转化率太低的广告，可能主要是素材和产品不匹配，用户点进去了发现不是那么回事
cpm：1000*spend/impression，其实表示你覆盖的人群类别，
cpa：成本，广告主关心问题之一
spend：花费，广告主关心问题值二
roi：(income-spend)/spend，其实就是由cpa和spend决定的
</code></pre>

<p>这些指标，重要的不仅是绝对值，还有相对值：</p>

<pre><code>和昨天同时段的比较
</code></pre>

<p>通常而言，CPA在投放地域的凌晨都会很高，而量级都会很少，以东南亚为例，我们通常都是在白天看数据，那么直接比较今天和昨天的CPA并不信服，而是应该看看今天和昨天同时段的情况。同理，周末的成本也会和平时不一样，这点也需要在比较时参考。</p>

<pre><code>和理论值的比较
</code></pre>

<p>CPA在不同投放地域的表现不同，欧美的成本就是远高于东南亚，cvr对新游戏老游戏不同，在投放地域存在基准值，可以用于判断ctr和cvr是否合理，以及素材本身是否需要改进。</p>

<pre><code>看趋势
</code></pre>

<p>有些时候成本或量级不符合要求，我们做了某些调整，但如果只看总体的效果，一段时间后仍然不符合预期，这时候需要仔细去分析小时数据的变化，即调整后怎么样了，才能合理评估调整的效果。这里面的一个黑科技是，通常调整后的一个小时，成本都有可能飙高，所以一是不要调整太频繁，二是看3-4个小时的效果较好。</p>

<p>再说说绝对值的事情：</p>

<pre><code>要看花费后再看CPA/ctr/cvr
</code></pre>

<p>花费只是几十美金的情况下，看CPA/ctr/cvr的绝对值高低参考意义不大。一定量级后再分析成本，包括离线模型也会滤除花费太少的ad。</p>

<pre><code>CPM与ctr*cvr是正相关的
</code></pre>

<p>投出的CPM某种程度上代表了你买到的人群，抛去特定产品的因素，人群本身对游戏的转化率也是不同的，比如有些人群会更喜欢玩游戏，当然，对他们的竞争也更激烈，表现为CPM也更高。
所以这里的一个黑科技是，覆盖不同的人群，因为本质上说，CPM增加和ctr*cvr增加速率高低，决定了CPA的大小，所以如果能够在指定人群上取得增量收益，即虽然花的钱多，但ctr*cvr增加更多，你还是能够降低成本的。</p>

<h4>设置篇</h4>

<p>素材</p>

<pre><code>做好素材，这不用多说了，原则上你素材够好，下面我写的都可以不用看了

多尝试不同的素材类型，比如轮播，视频，尤其是新广告形式刚刚上线的时候
文案意义不大，从目前的情况看，把语言搞对就行了
</code></pre>

<p>定向</p>

<pre><code>不要在一个定向上设置多于4个创意，否则也会竞争
不要在一个地域定向里包含太多国家，除非有必要这样做（比如每个国家人群太小）
对太大的游戏设置wifi-only
设置排除app和page like
一版friend of connection没什么用
游戏性别基本就是男性，应用可以混着
受众比较有用
兴趣其实用一般都名词就好，太细了除非你有研究
。。。
保证你的受众人群不要太小，越小竞争肯定越激烈
</code></pre>

<p>设置</p>

<pre><code>bid方法很多，我很推荐用我们的系统，简单来说，就按广告主的设置也可以，或者了解投放地域特点大致设置
daily budget 如果是应用，不要太高，如果是游戏，就看要不要量级
pause/start 创意级别开关可以的，但最好不要只看凌晨的数据
autobid: 有些时候结合daily budget可以，有些时候测试图不错，有些时候也会飞
</code></pre>

<h3>策略工程师随想</h3>

<p>其实最开始到RTB项目组，我们日常最花费精力的事情就是投放广告case的维护，现在想想，这应该是策略工程师的日常。</p>

<pre><code>运营会反馈：“我的广告投不出去了”，“我的广告成本不行”，“我的广告花费速度比昨天慢了”，“我的广告被拒了”。。。
</code></pre>

<p>策略工程师的任务
第一步来说，是通过后台投放的逻辑和数据分析，去发现问题究竟出在哪里。</p>

<pre><code>比如广告花费少，是因为内部排序的win\_rate低，那么是不是这个case单价过低，比如广告内部win\_rate不低，但在Ad Exchange上的win\_rate低，那么对比几天，看看是不是有土豪对手在竞价。。。再比如成本相差大，看看是不是ctr预估不准，是离线的问题，能不能加在线的因素控制，是在线的问题，看看会不会是时间窗口问题。。。
</code></pre>

<p>第二步，是根据发现的情况，给运营建议。因为在RTB投放里，运营看到的是一个黑盒系统，策略工程师实现系统，他可以了解问题出在哪里。</p>

<pre><code>比如是创意不行，还是出价过低，定向人群过少，或者其它的一些设置不合理（初始探测预算较小），也有可能问题是系统本身的问题，简单说是bug，复杂说可能是系统现在的局限。比如新创意没有保护，是否考虑保护一段时间，至少让它有一定的展现，万一是ctr, cvr很高的case呢
</code></pre>

<p>第三步，是总结常见的问题，进行系统改进。策略工程师相比运营更加理性，同时可以了解更多运营的通用需求，这种情况下，去总结问题，将它变成策略。
策略要注意的是实验，条件允许的情况下，总要通过A/B测试去确定策略是否合理。
策略同样要注意case by case的特点，广告主的诉求彼此不同，通常在投放的不同阶段也不会相同，所以策略总是有使用条件的，甚至有些时候，为特定广告主特定调整参数，也是完全可能的。</p>

<p>第四步，和前三步不同，那就是问题未必来自运营的直接反馈，而是自己的主动发现。
<strong>广告的核心问题，就是量级和成本的关系。我们总是希望用少的成本，同时获取高的量级。</strong></p>

<pre><code>当然它们本身是矛盾的，但总有一个平衡点，比如广告的动态出价，依赖当前广告的实际成本，去反馈不一样的出价，当前成本高了，实际出价低些，反之高些
</code></pre>

<p>这些大概都是两年以前在RTB项目组做项目的体会，现在居然还有不少印象。我在RTB项目组只呆了半年的时间，后来新成立Facebook项目组，我是从零开始的参与，事情类别多了很多，比如要先开始搭广告管理和统计的服务，研究Facebook API，后来又做数据支持和应用，但很大一部分工作，仍然是在策略上。
Facebook的模式和RTB不太一样，RTB是对每个流量竞价，你有个内部广告库，要过滤后排序，然后给出一个流量的绝对出价；Facebook你看不到每个流量，也不需要你对广告自己做排序，但要你为每个定向决定出价。从模式上说，Facebook很像做SEO，从技术上说，Facebook模式里，我们扮演的是RTB运营的角色，内部广告系统对我们是黑盒，我们要决定该怎么参与其中。
关于Facebook投放中的一些指标，在上面已经提了，总体而言，因为Facebook的黑盒特点，策略工程师的事情更不容易做，但我也在想办法更好的去理解它。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[saiku安装及基础配置]]></title>
    <link href="http://yoursite.com/blog/2016/10/25/saiku-install/"/>
    <updated>2016-10-25T11:56:21+08:00</updated>
    <id>http://yoursite.com/blog/2016/10/25/saiku-install</id>
    <content type="html"><![CDATA[<h4>背景</h4>

<p>saiku是一个开源的OLAP分析平台，在我们的项目中逐渐发现，除了基础的数据报表需求，以及数据挖掘需求外，也需要考虑把部分查询交互起来，一方面可以减少报表方面的压力，另外一方面也可以快速对数据进行验证，毕竟通过界面拖拽的方法相比直接写SQL还是要方便很多的。
在公司的另外一个项目里，saiku已经有比较成熟的应用，因此我们选择saiku作为我们需求处理的工具（尽管客观说saiku社区版还是有自己的问题的）。</p>

<h4>文档地址</h4>

<pre><code>http://wiki.meteorite.bi/display/SAIK/Saiku+Features
</code></pre>

<h4>下载</h4>

<p>通过wget下载最新的saiku社区版，目前版本是3.8.8：</p>

<pre><code>wget www.meteorite.bi/downloads/saiku-latest.zip
</code></pre>

<h4>启动安装注册</h4>

<p>下载后进入saiku-server目录，通过./start-saiku.sh可以启动saiku（同理，通过./stop-saiku.sh关闭saiku）。如果正常，启动后通过你机器的8080端口 (浏览器里visit <a href="http://your_IP:8080">http://your_IP:8080</a>)，可以访问到的saiku的登陆页面。</p>

<p>默认情况下，saiku的管理员账户和密码均是admin，但直接登陆后，会提示：</p>

<pre><code>Could not find license, please get a free license from http://licensing.meteorite.bi. You can upload it at http://server:8080/upload.html
</code></pre>

<p>这种情况是因为目前即使是社区版，也需要在saiku上注册：</p>

<pre><code>http://licensing.meteorite.bi/licenses
</code></pre>

<p>访问上述网址，可能会提示用户登陆，需要先注册用户。
登陆后，可以看到：</p>

<pre><code>LICENCE
    Create new licence
    List all licences
COMPANY
    Create new company
    List all companies
</code></pre>

<p>这样的目录结构，我的情况是，需要先创建一个company，然后再创建licence （company在licence中是必选的），licence的hostname就填写你机器的IP（我没有试过其它是否可以），下载licence文件到本地，然后再通过<a href="http://your_IP:8080/upload.html%E5%B0%86%E8%BF%99%E4%B8%AAlicence%E6%96%87%E4%BB%B6%E6%8F%90%E4%BA%A4%E4%B8%8A%E5%8E%BB%EF%BC%8C%E6%95%B4%E4%B8%AA%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B%E5%B0%B1%E5%AE%8C%E6%88%90%E4%BA%86%E3%80%82">http://your_IP:8080/upload.html%E5%B0%86%E8%BF%99%E4%B8%AAlicence%E6%96%87%E4%BB%B6%E6%8F%90%E4%BA%A4%E4%B8%8A%E5%8E%BB%EF%BC%8C%E6%95%B4%E4%B8%AA%E6%B3%A8%E5%86%8C%E8%BF%87%E7%A8%8B%E5%B0%B1%E5%AE%8C%E6%88%90%E4%BA%86%E3%80%82</a>
注册完成后，通过admin/admin可以登陆进入saiku。</p>

<h4>端口设置</h4>

<p>默认情况下，saiku启动在8080端口，如果需要更改，可以修改saiku-server/tomcat/conf/server.xml里的port配置，比如把8080全部替换为9090。</p>

<h4>权限控制</h4>

<p>saiku server的权限控制主要通过tomcat设置：</p>

<pre><code>tomcat/webapps/saiku/WEB-INF
</code></pre>

<p>其中applicationContext-saiku.xml会引用applicationContext-spring-security.xml，后者默认会采用jdbc设置，在applicationContext-spring-security-jdbc.xml中配置dataSource：</p>

<pre><code>      &lt;bean id="dataSource"                class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt;
            &lt;property name="driverClassName" value="com.mysql.jdbc.Driver" /&gt;
            &lt;property name="url"                        value="jdbc:mysql://your_IP:3306/admin" /&gt;
            &lt;property name="username" value="your_name" /&gt;
            &lt;property name="password" value="your_password" /&gt;
    &lt;/bean&gt;
</code></pre>

<h4>数据源连接</h4>

<p>在saiku中，我们需要通过预定义的Cube来指定数据访问。Cube是OLAP中的一个逻辑概念，通过对物理数据表的描述，将数据划分为dimension和metric（在saiku中为measure）。saiku中的Cube通过xml描述，具体含义可以参考<a href="http://mondrian.pentaho.com/documentation/schema.php#Cubes_and_dimensions">这里</a>，后续有机会我会详细介绍。
因此，假设我们已经建立好Cube对应的xml，以及数据库中对应的fact表和dimension表，那么我们还需要告诉saiku如何找到它们。
通过在tomcat/webapps/saiku/WEB-INF/classes/saiku-datasources中新建文件配置：</p>

<pre><code>type=OLAP
name=xxx
driver=mondrian.olap4j.MondrianOlap4jDriver
location=jdbc:mondrian:Jdbc=Jdbc:mysql://xxx/dbname;Catalog=&lt;your_xml_path&gt;
</code></pre>

<p>其中type一般是OLAP，name表示你Cube的名词，driver选择<a href="http://community.pentaho.com/projects/mondrian/">mondrian</a>，它是saiku内部使用的数据处理引擎，支持MDX查询 （从这个角度说，saiku更像是查询平台），location里分别指定xml位置和mysql连接方式。</p>

<p>配置完成后，重启saiku，你需要的数据已导入。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[策略-数据应用简介]]></title>
    <link href="http://yoursite.com/blog/2016/09/28/strategy-data-introduction/"/>
    <updated>2016-09-28T16:56:19+08:00</updated>
    <id>http://yoursite.com/blog/2016/09/28/strategy-data-introduction</id>
    <content type="html"><![CDATA[<p>在项目组，除了广告管理（AdManagement），统计更新（Stats Update）和规则应用（Rule Management）这三部分直接与用户交互服务相关的工作外，我其余的时间都主要投入在策略和数据这两个大的方向。后续计划会有一系列文章介绍我在这些方向上究竟做了什么，这篇博客仅仅作为一个总纲，谈谈我对它们的理解。</p>

<p>一. 数据分析, 策略，数据挖掘，数据监控的异同
算是先挖一个大坑吧，首先说，实际上这些概念在很多方面本身并没有明确的界限区分，比如很多招聘里的数据挖掘很可能是数据分析工作，而数据工程师又可能在做报表，所以一定要分清这些概念未必有意义。我之所以在这里拎起这些名词，主要是想把我做的事做归类，因为它们大概可以覆盖我做的策略和数据工作 （下面的内容，也是混合了概念和我具体工作的内容）。</p>

<table>
<thead>
<tr>
<th> 发起者\接收者        </th>
<th style="text-align:center;"> 人  </th>
<th style="text-align:right;">    机器  </th>
</tr>
</thead>
<tbody>
<tr>
<td> 人      </td>
<td style="text-align:center;"> 数据分析 </td>
<td style="text-align:right;">策略 </td>
</tr>
<tr>
<td> 机器      </td>
<td style="text-align:center;"> 数据监控      </td>
<td style="text-align:right;">   数据挖掘 </td>
</tr>
</tbody>
</table>


<p>关于发起者的定义是：数据规则的制定者，或者对数据操作的执行人。
关于接收者的定义是：数据规则的执行者，或者对操作结果的观察者。</p>

<p>1.数据分析：它是一个人到人的操作。
它更多强调的是分析师的价值，通过查看DashBoard（高端的通过BI工具）进而分析数据。分析本身有一些特定的模式（比如漏斗），分析师作为对业务最了解的人，在数据分析中起最重要的作用，更多的是偏宏观和经验的处理问题。
作为技术人员，经常会忽视数据分析的作用（或者认为这个过程没有技术含量），但在实际问题里，数据分析作为最快捷的方式，其实往往是用处最大的，所谓用20%的时间解决80%的问题，数据分析要求业务经验，技术更多的是提供辅助工具：报表，分析工具（同样不要轻视辅助工具，看到看不到，多快看到对业务价值影响很大，BI的生存点主要在此）。
多说一句题外话，我毕业后的第一份工作是在一家BI厂商（Microstrategy），因为在研发中心不会直接接触客户，当时并不了解产品的价值。现在真的到做业务后，才明白好的分析系统对数据应用的价值。</p>

<p>具体到我们的业务，我也有一部分工作在客户数据需求输出上面，为此我开发了一个小的<a href="https://github.com/linpingta/tools/tree/master/task_manager">任务执行框架</a>，减轻一些工作的负担。
我近期在做的是，如何输出一些能够吸引客户的，对客户有用的数据信息。为此我搭建了从FB抓取数据到存储的数据流，也给出了一些业务相关的数据应用方案 （简单举个例子，比如图片质量得分随天变化趋势），但我更想强调的是，在我想法里，如果想吸引用户，必须抓住两点：</p>

<pre><code>1.提供给用户FB现有分析工具不能提供的数据
2.要把有用数据“推”给用户，而不是等用户去查
</code></pre>

<p>这两点提出的原因是，FB的分析工具是很多比我更优秀的工程师开发而成的，虽然我们的系统也有报表，但无论从数据内容和展现效果看都无法相提并论，那么，用户为什么要用我们的报表分析？</p>

<p>第一点，举个例子，ad出价bid_amount是一个状态变量，但它直接影响广告投放给什么人群（CPM），我们去记录bid_amount与CPM的关系，分析竞争情况，这是FB自带分析工具没有的。
第二点，只是把大量数据交给运营是没有意义的，比如广告账户分天的成本，能不能让系统找到里面成本异常的时候，及时告知用户，再多做一步分析。
这两点的内容，是我在这方面工作之后的方向。</p>

<p>2.策略：它是一个人到机器的过程
首先你得熟悉业务。举个例子，在实际管理过大量广告后统计发现：</p>

<pre><code>(1)今天或者过去7天成本达到A的ad必须要关闭
(2)发现某类账户在某些国家下新ad必须要出高于目标1.5倍的价格才能投放，然后投放稳定后价格又要回收到某个价格
(3)广告预算需要缓慢增加，甚至一定时候降低
</code></pre>

<p>这些信息，有些是可以通过理论解释的（比如出价高量级大），有些是不能有理论解释但客观存在的（比如某些账号的成本就会更低），它们必须通过实际业务经营获取，换句话说，就是花钱花出来的。
这些经验，我们称之为规则，可能是一个规则，也可能是一组规则，但最终规则会被表述为策略的方式，交由服务来执行，因此我觉得策略是一个由人到机器的过程，因为它是由人发现总结出来的（广告成本超过A应该停止投放），而由机器去执行的（满足要求停止投放，无论现在是凌晨还是正午）。
但策略又不仅仅是规则，有可能不是人可以观察到的，具体到我做的部分，在线策略主要包括状态机和反馈系统，离线策略主要包括动态参数的调整。这些内容我计划后续会详细介绍，这里只提一个引子：</p>

<p>****状态机：广告有它的生命周期，初始，稳定，衰退，用一个自管理的系统去控制广告投放时，在不同阶段有不同的投放策略。比如出价，初始阶段，可能出价会高一些去获取展现，稳定阶段又要根据实际CPA反馈去调整出价，衰退阶段可能会去尝试保CPM，不行就做关停。这些阶段的定义，ad在阶段间的跳转条件，都是通过状态机实现的</p>

<p>****反馈：由于我们业务的特点（在FB上投放广告，不是RTB的模式，是在FB优化的基础上再做优化），我们不能直接控制每一份流量的出价，而只能去宏观调整ad目标，这种情况下完全准确预测广告出价不太可能，所以我把系统做成一个反馈系统，简单说，看最近一段时间（花费）的成本，高了就调低，低了就调高 （但实际问题里很多时候不是这么简单的，最简单的一个问题，你要是调低的太低花不出去钱了怎么办）</p>

<p>****动态调整：举个例子，对每个广告账户，它能投起来的初始出价是不一样的，我们可以根据经验去规定一个统一的初始倍数，但它未必合适，如果让系统去学习一个账户过去一段时间内的平均出价和CPA关系，再确定一个初始倍数，应该合理的多。</p>

<p>3.数据监控：机器发现一件事情发生，及时通知相关的业务人员
策略不是万能的，而且很多时候是差很远的，因为很多人为的信息并没有告知计算机，因此操作还需要人参与。
举个例子，一个广告的日预算是500$，它花到了，广告被暂停了，那么之后是应该扩大预算继续投放呢，还是保持预算暂停呢？这个问题，可能运营会先看成本，成本低于目标继续投放，高于暂停，但业务的情况是，广告主可能在这个广告定向上有每天投放的配额，这样即使预算花到成本OK，也不能继续投放了。
这些信息，不是机器能够了解的，也不可能交给机器自主决定后续方案。
关于数据监控，对我们的问题，我在如下层次上开发监控：</p>

<p><strong><strong>基础监控：它本身也包括运维类的监控，比如CPU,IO,内存，硬盘等，以及关键字、进程状态监控，很重要，但不是我工作的重点
</strong></strong>业务设置监控：例如用户设置了过高的出价，过小的预算或者过小的定向人群
<strong><strong>业务状态监控：例如账户是否被封禁，创意是否被拒审
</strong></strong>业务效果监控：例如ROI不符合预期，突然剧烈变化</p>

<p>监控部分的输出，我还是认为用户不会主动去看我们的报表，因此从“推”的角度，主要考虑邮件和微信（算是中国特色）两种形式，我剥离了业务本身内容后，相关的代码可见<a href="https://github.com/linpingta/tools/tree/master/task_monitor">这里</a>和<a href="https://github.com/linpingta/weixin-api-related/tree/master/weixin-monitor">这里</a>。</p>

<p>4.数据挖掘：机器到机器的过程
策略和数据挖掘其实很难划分，因为策略也有基于离线数据的处理，数据挖掘也有在线的算法，但前者更简单，可以认为是通过规则把数据分析和监控的结果机器化处理，业务本身的耦合性更强，后者更复杂，通过目标函数的优化去发现一些人无法发现或者解决人无法处理的问题。
这部分的工作，我在项目里去年做过一些尝试，但不太成功，原因首先在于：</p>

<pre><code>对数据挖掘的效果太理想化，认为用和不用能有很明显的区别
</code></pre>

<p>客观来讲主要在于三点：</p>

<pre><code>系统本身数据量不大
A/B测试没法做
业务人员应用意愿不强
</code></pre>

<p>具体来说，第一点是说，我们的广告主不多，反复就这么多数据，区分性不大，第二点是FB业务本身的特点，即使所有设置都一样的两个广告投放，也可能会因为彼此抢量而又不一样的效果，无法像RTB那样按idfa保证A/B测试条件，第三点在于，既然你的系统说不出好，那么业务人员为什么要使用呢？
这部分的教训，我后续应该会专门做下记录。</p>

<p>数据挖掘也是我近期工作的重点，因为我们有了额外的数据源，也有了可评估的历史数据，可以基于Spark做更多的分析，但结果，现在还是未知的。
依据之前在Kaggle的一个比赛，我开发了一个简单的基于python pandas的模型框架，在<a href="https://github.com/linpingta/tools/tree/master/model_trainer">这里</a>。</p>

<p>二. 介绍
说完上述内容，我在这里列下之后博客文章的内容，希望一步步把它们补充完整。</p>

<p>1.自管理系统演化：介绍策略系统的演化过程，包括在线离线部分，以及理想和现实的差距
2.离线数据流建立/应用：介绍离线数据抓取到存储的过程，以及数据分析需求的解决
3.监控内容与方式梳理：业务监控的分类，输出方式，后台服务管理
4.数据挖掘的教训和更新：我做了什么，为什么失败，之后要怎么做</p>
]]></content>
  </entry>
  
</feed>
